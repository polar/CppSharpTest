// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace ALK
{
    public unsafe partial class Test : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 128)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C item1;

            [FieldOffset(32)]
            internal global::Std.BasicString.__Internalc__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C item2;

            [FieldOffset(64)]
            internal global::Std.BasicString.__Internalc__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C item3;

            [FieldOffset(96)]
            internal global::Std.BasicString.__Internalc__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C item4;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("ALK", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4TestC2Ev")]
            internal static extern void ctor(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("ALK", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4TestC2ERKS_")]
            internal static extern void cctor(global::System.IntPtr __instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("ALK", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4TestD2Ev")]
            internal static extern void dtor(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("ALK", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4Test5printEv")]
            internal static extern void Print(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("ALK", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4Test4addrEv")]
            internal static extern ulong Addr(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("ALK", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4Test6aItem1Ev")]
            internal static extern ulong AItem1(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("ALK", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4Test6aItem2Ev")]
            internal static extern ulong AItem2(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("ALK", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4Test6aItem3Ev")]
            internal static extern ulong AItem3(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("ALK", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4Test6aItem4Ev")]
            internal static extern ulong AItem4(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("ALK", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4Test6oItem1Ev")]
            internal static extern int OItem1(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("ALK", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4Test6oItem2Ev")]
            internal static extern int OItem2(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("ALK", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4Test6oItem3Ev")]
            internal static extern int OItem3(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("ALK", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4Test6oItem4Ev")]
            internal static extern int OItem4(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("ALK", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4Test7getTestEv")]
            internal static extern void GetTest(global::System.IntPtr @return);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("ALK", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4Test13getStaticTestEv")]
            internal static extern global::System.IntPtr GetStaticTest();
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::ALK.Test> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::ALK.Test>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::ALK.Test __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::ALK.Test(native.ToPointer(), skipVTables);
        }

        internal static global::ALK.Test __CreateInstance(global::ALK.Test.__Internal native, bool skipVTables = false)
        {
            return new global::ALK.Test(native, skipVTables);
        }

        private static void* __CopyValue(global::ALK.Test.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::ALK.Test.__Internal));
            global::ALK.Test.__Internal.cctor(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private Test(global::ALK.Test.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected Test(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public Test()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::ALK.Test.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance);
        }

        public Test(global::ALK.Test _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::ALK.Test.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor(__Instance, __arg0);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::ALK.Test __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (disposing)
                __Internal.dtor(__Instance);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public void Print()
        {
            __Internal.Print(__Instance);
        }

        public string Item1
        {
            get
            {
                var __basicStringRet0 = global::Std.BasicString<sbyte, global::Std.CharTraits<sbyte>, global::Std.Allocator<sbyte>>.__CreateInstance(new global::System.IntPtr(&((global::ALK.Test.__Internal*) __Instance)->item1));
                return global::Std.BasicStringExtensions.Data(__basicStringRet0);
            }

            set
            {
                global::Std.BasicStringExtensions.__Internal.Assign(new global::System.IntPtr(&((global::ALK.Test.__Internal*)__Instance)->item1), value);
            }
        }

        public string Item2
        {
            get
            {
                var __basicStringRet0 = global::Std.BasicString<sbyte, global::Std.CharTraits<sbyte>, global::Std.Allocator<sbyte>>.__CreateInstance(new global::System.IntPtr(&((global::ALK.Test.__Internal*) __Instance)->item2));
                return global::Std.BasicStringExtensions.Data(__basicStringRet0);
            }

            set
            {
                global::Std.BasicStringExtensions.__Internal.Assign(new global::System.IntPtr(&((global::ALK.Test.__Internal*)__Instance)->item2), value);
            }
        }

        public string Item3
        {
            get
            {
                var __basicStringRet0 = global::Std.BasicString<sbyte, global::Std.CharTraits<sbyte>, global::Std.Allocator<sbyte>>.__CreateInstance(new global::System.IntPtr(&((global::ALK.Test.__Internal*) __Instance)->item3));
                return global::Std.BasicStringExtensions.Data(__basicStringRet0);
            }

            set
            {
                global::Std.BasicStringExtensions.__Internal.Assign(new global::System.IntPtr(&((global::ALK.Test.__Internal*)__Instance)->item3), value);
            }
        }

        public string Item4
        {
            get
            {
                var __basicStringRet0 = global::Std.BasicString<sbyte, global::Std.CharTraits<sbyte>, global::Std.Allocator<sbyte>>.__CreateInstance(new global::System.IntPtr(&((global::ALK.Test.__Internal*) __Instance)->item4));
                return global::Std.BasicStringExtensions.Data(__basicStringRet0);
            }

            set
            {
                global::Std.BasicStringExtensions.__Internal.Assign(new global::System.IntPtr(&((global::ALK.Test.__Internal*)__Instance)->item4), value);
            }
        }

        public ulong Addr
        {
            get
            {
                var __ret = __Internal.Addr(__Instance);
                return __ret;
            }
        }

        public ulong AItem1
        {
            get
            {
                var __ret = __Internal.AItem1(__Instance);
                return __ret;
            }
        }

        public ulong AItem2
        {
            get
            {
                var __ret = __Internal.AItem2(__Instance);
                return __ret;
            }
        }

        public ulong AItem3
        {
            get
            {
                var __ret = __Internal.AItem3(__Instance);
                return __ret;
            }
        }

        public ulong AItem4
        {
            get
            {
                var __ret = __Internal.AItem4(__Instance);
                return __ret;
            }
        }

        public int OItem1
        {
            get
            {
                var __ret = __Internal.OItem1(__Instance);
                return __ret;
            }
        }

        public int OItem2
        {
            get
            {
                var __ret = __Internal.OItem2(__Instance);
                return __ret;
            }
        }

        public int OItem3
        {
            get
            {
                var __ret = __Internal.OItem3(__Instance);
                return __ret;
            }
        }

        public int OItem4
        {
            get
            {
                var __ret = __Internal.OItem4(__Instance);
                return __ret;
            }
        }

        public static global::ALK.Test test
        {
            get
            {
                var __ret = new global::ALK.Test.__Internal();
                __Internal.GetTest(new IntPtr(&__ret));
                return global::ALK.Test.__CreateInstance(__ret);
            }
        }

        public static global::ALK.Test StaticTest
        {
            get
            {
                var __ret = __Internal.GetStaticTest();
                global::ALK.Test __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::ALK.Test.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::ALK.Test) global::ALK.Test.NativeToManagedMap[__ret];
                else __result0 = global::ALK.Test.__CreateInstance(__ret);
                return __result0;
            }
        }
    }
}
